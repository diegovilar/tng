/// <reference path="../_references" />

import {hasAnnotation, getAnnotations} from 'tng/reflection';
import {ModuleAnnotation, publishModule} from 'tng/module';

import * as namedModule from '../assets/named-module';
import * as annonymousModule from '../assets/annonymous-module';

function spyAngular() {
	spyOn(angular, 'module');
}

describe('Module', function() {
	
	it('should have a ModuleAnnotation', function() {
		var has = hasAnnotation(namedModule.NamedModule, ModuleAnnotation);
		expect(has).toBe(true);
	});
	
	it('should allow for multiple ModuleAnnotation instances', function() {
		var notes = getAnnotations(namedModule.NamedModule, ModuleAnnotation);
		expect(notes.length).toBe(2);
	});
	
	describe('publishModule', function() {
		
		beforeEach(spyAngular);
		
		it('should publish a module to angular', function() {
			publishModule(namedModule.NamedModule);
			expect(angular.module).toHaveBeenCalled();
		});
		
		it('should publish a module to angular with the annotated name', function() {
			publishModule(namedModule.NamedModule);
			var args = (<jasmine.Spy> angular.module).calls.mostRecent().args;
			expect(args[0]).toBe('NamedModule');
		});
		
		it('should publish a module to angular with the provided name, if any', function() {
			publishModule(namedModule.NamedModule, 'newName');
			var args = (<jasmine.Spy> angular.module).calls.mostRecent().args;
			expect(args[0]).toBe('newName');
		});
		
		it('should publish a module to angular with an autogenerated name if needed', function() {
			publishModule(annonymousModule.AnnonymousModule);
			var args = (<jasmine.Spy> angular.module).calls.mostRecent().args;
			expect(args[0]).toBe('tng_generated_module#1');
		});
		
	});
	
	describe('constructor', function() {

		it('should receive a reference to the angular module as the first parameter', function() {			
			var aux = publishModule(namedModule.NamedModule);
			expect(aux).toBe(namedModule.constructorParameter);
		});
		
	});
	
});