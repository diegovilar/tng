/// <reference path="./_references" />

import {hasAnnotation, getAnnotations} from 'tng/reflection';
import {ModuleAnnotation, publishModule} from 'tng/module';
import {angularSpy} from './utils';

// assets
import * as namedModule from './assets/named-module';
import * as annonymousModule from './assets/annonymous-module';

describe('Module', function() {
	
	it('should have a ModuleAnnotation', function() {
		var has = hasAnnotation(namedModule.NamedModule, ModuleAnnotation);
		expect(has).toBe(true);
	});
	
	it('should allow for multiple ModuleAnnotation instances', function() {
		var notes = getAnnotations(namedModule.NamedModule, ModuleAnnotation);
		expect(notes.length).toBe(2);
	});
	
	describe('publishModule', function() {
		
		beforeEach(angularSpy.spyAndCallThrough);
		
		it('should publish a module to angular', function() {
			publishModule(namedModule.NamedModule);
			expect(angularSpy.module).toHaveBeenCalled();
		});
		
		it('should publish a module to angular with the annotated name', function() {
			publishModule(namedModule.NamedModule);
			var name = angularSpy.module.calls.mostRecent().args[0];
			expect(name).toBe('NamedModule');
		});
		
		it('should publish a module to angular with the provided name, if any', function() {
			publishModule(namedModule.NamedModule, 'newName');
			var name = angularSpy.module.calls.mostRecent().args[0];
			expect(name).toBe('newName');
		});
		
		it('should publish a module to angular with an autogenerated name if needed', function() {
			publishModule(annonymousModule.AnnonymousModule);
			var name = angularSpy.module.calls.mostRecent().args[0];
			expect(name).toBe('tng_generated_module#1');
		});
		
	});
	
	describe('constructor', function() {
		
		beforeEach(angularSpy.spyAndCallThrough);

		it('should receive a reference to the angular module as the first parameter', function() {			
			var aux = publishModule(namedModule.NamedModule);
			expect(aux).toBe(namedModule.constructorParameter);
		});
		
	});
	
});